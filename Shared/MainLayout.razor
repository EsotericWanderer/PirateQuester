@using Utils;
@inherits LayoutComponentBase
@inject AccountManager accounts
@inject IJSInProcessRuntime JS
@inject NavigationManager NM
@code{
    bool sidebarExpanded = false;
}

<RadzenDialog />
<div class="page">
    <main style="width:100%;">
        <RadzenLayout class="">
            <RadzenHeader>
                <div class="d-flex align-items-center">
                    <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                    <div class="overflow-auto" style="white-space:nowrap;">
                        <div class="d-inline-block">
                            @if (accounts.Accounts.Count == 1)
                            {
                                <RadzenButton Click="@(() => NM.NavigateTo("Accounts"))" Style="white-space:nowrap;">
                                    Logged in as @accounts.Accounts.FirstOrDefault().Account.Address
                                </RadzenButton>
                            }
                            else if (accounts.Accounts.Count > 1)
                            {
                                <RadzenButton Click="@(() => NM.NavigateTo("Accounts"))" Style="white-space:nowrap;">
                                    Logged in with @accounts.Accounts.Count accounts
                                </RadzenButton>
                            }
                            else if (accountNames.Count > 0)
                            {
                                <br />
                                <RadzenLink Path="Login" Text="Login" Style="white-space:nowrap;" />
                            }
                            else
                            {
                                <RadzenLink Path="CreateAccount" Text="Create Account" Style="white-space:nowrap;" />
                            }
                        </div>
                        <RadzenText Text="Pirate Quester 🏴‍☠️" Style="white-space:nowrap;" class="d-inline-block mx-5" />
                    </div>
                    
                </div>
            </RadzenHeader>
            <RadzenSidebar @bind-Expanded="@sidebarExpanded">
                <RadzenPanelMenu>
                    <RadzenPanelMenuItem Text="Home" Icon="home" Path="/" />
                    @if (accountNames.Count > 0)
                    {
                        if(accounts.Accounts.Count > 0)
                        {
                            <RadzenPanelMenuItem Text="Accounts" Path="/Accounts" Icon="account_circle"></RadzenPanelMenuItem>
                        }
                        else if (GetLoggedOutAccountNames().Count > 0)
                        {
                            <RadzenPanelMenuItem Text="Login" Path="/Login" Icon="account_circle"></RadzenPanelMenuItem>
                        }
                    }
                    <RadzenPanelMenuItem Text="Create Account" Path="/CreateAccount" Icon="account_box"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Path="Options" Text="Options" Icon="wrench" />
                </RadzenPanelMenu>
                <div class="p-2">
                    <RadzenText Text="Notepad" />
                    <RadzenTextArea @bind-Value="@notePad" Change="@SaveNotepad" class="w-100" Rows="30" />
                </div>
            </RadzenSidebar>
            <RadzenBody>
                @Body
            </RadzenBody>
            @*<RadzenFooter>
                Footer
            </RadzenFooter>*@
        </RadzenLayout>
    </main>
</div>
@code{
    List<string> accountNames = new();
    string notePad = "";
    void SaveNotepad()
    {
        JS.InvokeVoid("localStorage.setItem", new string[] { "notePad", notePad });
    }

    List<string> GetLoggedOutAccountNames()
    {
        return accountNames.Where(acc => accounts.Accounts.Select(acc => acc.Name).Any(key => key == acc) is false).ToList();
    }
    void LoadDarkMode()
    {
        string darkMode = JS.Invoke<string>("localStorage.getItem", "darkMode");
        if (bool.TryParse(darkMode, out bool darkModeBool))
        {
            if (darkModeBool)
            {
                JS.Invoke<string>("SetStylesheet", "_content/Radzen.Blazor/css/dark.css");
            }
            else
            {
                JS.Invoke<string>("SetStylesheet", "_content/Radzen.Blazor/css/standard.css");
            }
        }
        else
        {
            JS.Invoke<string>("SetStylesheet", "_content/Radzen.Blazor/css/dark.css");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        notePad = JS.Invoke<string>("localStorage.getItem", "notePad");
        accountNames = await accounts.GetAccountNames();
        //Don't know why but I have to toggle the sidebar expand twice to actually have it not expanded by default.
        sidebarExpanded = !sidebarExpanded;
        LoadDarkMode();
        sidebarExpanded = !sidebarExpanded;
    }
}