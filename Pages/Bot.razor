@page "/Bot"
@using DFKContracts.QuestCore.ContractDefinition;
@using PirateQuester.Bot;
@using PirateQuester.Components
@using PirateQuester.DFK.Contracts;
@using PirateQuester.Utils;
@using PirateQuester.Utils.Chain;
<PageTitle>PQ - Bot</PageTitle>
<BotTerminalNavigation />


<RadzenCard class="my-1">
	<EditForm Model="Bots.Settings">
		<div class="my-1 text-center">
			@if (Acc.Accounts.Any(acc => acc.PQTBalance > 0))
			{
				<RadzenButton Text="Run Bots" ButtonType="ButtonType.Submit" Disabled="Bots.CheckRunning()" Click="@Bots.RunBots" />
				<RadzenButton Text="Stop Bots" ButtonType="ButtonType.Submit" Disabled="Bots.RunningBots.All(bot => bot.StopBot)" Click="@Bots.StopBots" />
			}
			else
			{
				<h4 class="text-danger">
                    You don't have PQT on any of your accounts.
				</h4>
				<h4 class="text-danger">
                    Visit the <RadzenButton Click=@(() => Nav.NavigateTo("Accounts"))>Accounts</RadzenButton> page to add an account with PQT.
				</h4>
			}
			<RadzenButton Text="Save Settings" ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Click="@Bots.SaveSettings" />
		</div>
		<div class="row">
			<div class="col-md-6">
				<RadzenLabel Text="Update Frequency (Seconds)" Component="UpdateInterval" />
				<RadzenNumeric Name="UpdateInterval" class="w-100 my-1" 
				TValue="int" 
				Value="Bots.Settings.UpdateInterval" 
				Change="@((val) => {Bots.Settings.UpdateInterval=val;Bots.SaveSettings();})" />
			</div>

			<div class="col-md-6">
				<RadzenLabel Text="Min Stamina to Quest" Component="MinStamina" />
				<RadzenNumeric Name="MinStamina" class="w-100 my-1"
				TValue="int"
				Value="Bots.Settings.MinStamina"
				Change="@((val) => {Bots.Settings.MinStamina=val;Bots.SaveSettings();})"/>
			</div>
			
			<div class="col-md-6">
				<RadzenLabel Text="MaxGasFee (If your Max Fee is too low txns could get stuck during high traffic times.)" Component="MaxGasFee" />
				<RadzenNumeric Name="MaxGasFee" class="w-100 my-1"
				TValue="int"
				Value="Bots.Settings.MaxGasFeeGwei"
		  Change="@((val) => {Bots.Settings.MaxGasFeeGwei=val;Bots.SaveSettings();})" />
			</div>

			<div class="col-md-6">
				<RadzenLabel Text="Cancel transaction delay. If this is not set transactions may get stuck forever. If it's set too low transactions receipts get missed. (Milliseconds)"
					Component="CancelTxnDelay" />
				<RadzenNumeric Name="CancelTxnDelay" class="w-100 my-1"
					TValue="int"
					Value="Bots.Settings.CancelTxnDelay"
					Change="@((val) => {Bots.Settings.CancelTxnDelay=val;Bots.SaveSettings();})" />
			</div>
			<div class="col-md-6 text-center mb-1">
				<label>
					Enable Hero Selling
					<SfCheckBox
						@bind-Checked=@Bots.Settings.SellHeroes
						/>
				</label>
			</div>
			<div class="col-md-6 text-center mb-1">
				<label>
					Cancel Unpriced Hero Sales
					<SfCheckBox @bind-Checked=@Bots.Settings.CancelUnpricedHeroSales />
				</label>
			</div>
			<div class="col-md-12 text-center">
				<RadzenButton Click="(() => ShowDFKQuests = !ShowDFKQuests)">
					@if(ShowDFKQuests)
					{
						<span>
							Show Serendale Quests
						</span>
					}
					else
					{
						<span>
							Show Crystalvale Quests
						</span>
					}
				</RadzenButton>
			</div>
            <div class="col-12 text-center">
				@foreach(Chain chain in Constants.ChainsList)
                {
					@if ((ShowDFKQuests && chain.Name == "DFK") || (ShowDFKQuests is false && chain.Name == "Klaytn"))
					{
						<div class="row">
							<div class="col-12">
								<RadzenText TextStyle="TextStyle.H5" Text="@($"{chain.Name} Quest Contracts")" />
								@*First 8 quests are training quests*@
								<div class="row">
									@foreach (QuestContract quest in QuestContractDefinitions.DFKQuestContracts.First(qc => qc.Chain.Name == chain.Name).QuestContracts.Skip(8))
									{
										var questEnabled = Bots.Settings.ChainQuestEnabled.Find(qe => qe.Chain.Name == chain.Name).QuestEnabled.First(qe => qe.QuestId == quest.Id);

										<div class="col-md-4 col-lg-3">
											<RadzenText Text="@($"{quest.Name}")"/>
											<label class="d-inline-block">
												Enabled
												<SfCheckBox @bind-Checked=@questEnabled.Enabled />
											</label>
											<br />
											<label class="d-inline-block">
												Quest Eagerly
												<SfCheckBox @bind-Checked=@questEnabled.QuestEagerly/>
											</label>
											<RadzenLabel class="w-100"
												Text="@($"Min Stamina:")" 
												Component="@($"ProfessionEnabled{chain.Name}{quest.Id}")" />
											<RadzenNumeric Name="@($"MinStam{chain.Name}{quest.Id}")"
												class="w-100"
												Placeholder="@(Bots.Settings.MinStamina.ToString())"
												TValue="int?"
												Value="questEnabled.MinStamina"
												Change="@((val) => questEnabled.MinStamina = val)" />
										</div>
									}
								</div>
								<RadzenText TextStyle="TextStyle.H5" Text="@($"{chain.Name} Training Quests")" />
								<div class="row">

									@foreach (DFKStatAmount stat in Bots.Settings.MinTrainingStats)
									{
										var TQ = Bots.Settings.ChainQuestEnabled.Find(qe => qe.Chain.Name == chain.Name).QuestEnabled[Bots.Settings.MinTrainingStats.IndexOf(stat)];
										<div class="col-md-6">
											<RadzenText Text="@($"{stat.Name} training.")" />
											<label class="d-inline-block">
												Enabled
												<SfCheckBox @bind-Checked=@TQ.Enabled />
											</label>
											<label class="d-inline-block">
												Quest Eagerly
												<SfCheckBox @bind-Checked=@TQ.QuestEagerly/>
											</label>
											<RadzenLabel class="w-100" 
												Text="@($"Min Stamina:")" 
												Component="@($"ProfessionEnabled{chain.Name}{Bots.Settings.MinTrainingStats.IndexOf(stat)}")" />
											<RadzenNumeric class="w-100 my-1"
												Placeholder="@(Bots.Settings.MinStamina.ToString())"
												Name="@($"MinStam{chain.Name}{Bots.Settings.MinTrainingStats.IndexOf(stat)}")"
												TValue="int?"
												Value="TQ.MinStamina"
												Change="@((val) => TQ.MinStamina = val)" />
											<br>
											<RadzenLabel Text="@($"Min Value")" 
												Component="@($"Training{stat.Id}")" />
											<RadzenNumeric 
												Name="@($"Training{stat.Id}")" class="w-100 my-1" @bind-Value=@stat.Amount />
										</div>
									}
								</div>
							</div>
						</div>
					}
				}
			</div>

			<div>
				<div class="text-center my-2" style="font-size:12px;">
					<RadzenLabel Text="Level Up" Component="LevelUp" /><br />
					<RadzenCheckBox @bind-Value=@Bots.Settings.LevelUp Name="LevelUp">
						Enable Levelup
					</RadzenCheckBox>
				</div>
				@if(Bots.Settings.LevelUp)
				{
					<div class="row">
						@foreach (string mainClass in Constants.Classes)
						{
							var valueAttribute = Bots.Settings.LevelUpSettings.FirstOrDefault(setting => setting.HeroClass == mainClass.ToLower());
							
							if(valueAttribute is null)
							{
								valueAttribute = Bots.Settings.SuggestedLevelUpSettings.FirstOrDefault(setting => setting.HeroClass == mainClass.ToLower());
							}
							
							<RadzenText TextStyle="TextStyle.H6" class="text-center">@(mainClass) Levelup settings</RadzenText>
							<div class="col-md-4">
								<RadzenCard class="m-2">
									<RadzenText Text="Main (+1)" class="text-center" />
									<RadzenDropDown TValue="DFKStat"
									   Data="@Constants.DFKStats"
									   AllowClear="false"
									   TextProperty="Name"
									   class="w-100"
									   Value=@valueAttribute.MainAttribute
									   Change="((value) => {valueAttribute.MainAttribute = value as DFKStat;})" />
								</RadzenCard>
							</div>
							<div class="col-md-4">
								<RadzenCard class="m-2">
									<RadzenText Text="Secondary (50% +1)" class="text-center" />
									<RadzenDropDown TValue="DFKStat"
									   Data="@Constants.DFKStats"
									   TextProperty="Name"
									   AllowClear="false"
									   class="w-100"
									   Value=@valueAttribute.SecondaryAttribute
									   Change="((value) => {valueAttribute.SecondaryAttribute = value as DFKStat;})" />
								</RadzenCard>
							</div>
							<div class="col-md-4">
								<RadzenCard class="m-2">
									<RadzenText Text="Secondary (50% +1)" class="text-center" />
									<RadzenDropDown TValue="DFKStat"
									   Data="@Constants.DFKStats"
									   TextProperty="Name"
									   AllowClear="false"
									   class="w-100"
									   Value=@valueAttribute.TertiaryAttribute
									   Change="((value) => {valueAttribute.TertiaryAttribute = value as DFKStat;})" />
								</RadzenCard>
							</div>
						}
					</div>
				}
			</div>
		</div>
	</EditForm>
</RadzenCard>
@code {
	private void DialogWindow(string message)
	{
		Dialog.Open("",
	x =>
	@<div>
		@message
	</div>,
	new DialogOptions()
	{
		ShowTitle = true,
		CloseDialogOnEsc = true,
		ShowClose = true,
		Resizable = true,
		Draggable = true,
		CloseDialogOnOverlayClick = true,
		AutoFocusFirstElement = true
	});
	}
}
