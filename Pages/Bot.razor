@page "/Bot"
@using DFKContracts.QuestCore.ContractDefinition;
@using PirateQuester.Bot;
@using PirateQuester.Components
@using PirateQuester.Utils;
<PageTitle>PQ - Bot</PageTitle>
<BotTerminalNavigation />
<RadzenCard class="my-1">
	<EditForm Model="Bots.Settings">
		<div class="my-1 text-center">
			<RadzenButton Text="Run Bots" ButtonType="ButtonType.Submit" Disabled="Bots.CheckRunning()" Click="@Bots.RunBots" />
			<RadzenButton Text="Stop Bots" ButtonType="ButtonType.Submit" Disabled="Bots.RunningBots.All(bot => bot.StopBot)" Click="@Bots.StopBots" />
		</div>
		<div class="row">
			<div class="col-md-4">
				<RadzenLabel Text="Update Frequency (Seconds)" Component="UpdateInterval" />
				<RadzenNumeric Name="UpdateInterval" class="w-100 my-1" @bind-Value=@Bots.Settings.UpdateInterval />
			</div>
			<div class="col-md-4">
				<RadzenLabel Text="Min Stamina to Quest" Component="MinStamina" />
				<RadzenNumeric Name="MinStamina" class="w-100 my-1" @bind-Value="@Bots.Settings.MinStamina" />
			</div>
			<div class="col-md-4">
				<RadzenLabel Text="MaxGasFee (If your Max Fee is too low txns could get stuck during high traffic times. A high Max Fee doesn't take more fees unless the chain is clogged.)" Component="MaxGasFee" />
				<RadzenNumeric Name="MaxGasFee" class="w-100 my-1" @bind-Value="@Bots.Settings.MaxGasFeeGwei" />
			</div>
			<div>
				<div class="text-center my-2" style="font-size:12px;">
					<RadzenLabel Text="Level Up" Component="LevelUp" /><br />
					<RadzenCheckBox @bind-Value=@Bots.Settings.LevelUp Name="LevelUp">
						Enable Levelup
					</RadzenCheckBox>
				</div>
				@if(Bots.Settings.LevelUp)
				{
					<div class="row">
						@foreach (string mainClass in Constants.Classes)
						{
							var suggested = Bots.Settings.SuggestedLevelUpSettings.FirstOrDefault(setting => setting.HeroClass == mainClass.ToLower());
							var valueAttribute = Bots.Settings.LevelUpSettings.FirstOrDefault(setting => setting.HeroClass == mainClass.ToLower());
							valueAttribute = suggested;
							if(suggested is null)
							{
								Console.WriteLine(suggested.HeroClass);
								continue;
							}
							
							<RadzenText TextStyle="TextStyle.H6" class="text-center">@(mainClass) Levelup settings</RadzenText>
							<div class="col-md-4">
								<RadzenCard class="m-2">
									<RadzenText Text="Main (+1)" class="text-center" />
									<RadzenDropDown TValue="DFKStat"
									   Data="@Constants.DFKStats"
									   AllowClear="false"
									   TextProperty="Name"
									   class="w-100"
									   Value=@valueAttribute.MainAttribute
									   Change="((value) => {valueAttribute.MainAttribute = value as DFKStat;})" />
								</RadzenCard>
							</div>
							<div class="col-md-4">
								<RadzenCard class="m-2">
									<RadzenText Text="Secondary (50% +1)" class="text-center" />
									<RadzenDropDown TValue="DFKStat"
									   Data="@Constants.DFKStats"
									   TextProperty="Name"
									   AllowClear="false"
									   class="w-100"
									   Value=@valueAttribute.SecondaryAttribute
									   Change="((value) => {valueAttribute.SecondaryAttribute = value as DFKStat;})" />
								</RadzenCard>
							</div>
							<div class="col-md-4">
								<RadzenCard class="m-2">
									<RadzenText Text="Secondary (50% +1)" class="text-center" />
									<RadzenDropDown TValue="DFKStat"
									   Data="@Constants.DFKStats"
									   TextProperty="Name"
									   AllowClear="false"
									   class="w-100"
									   Value=@valueAttribute.TertiaryAttribute
									   Change="((value) => {valueAttribute.TertiaryAttribute = value as DFKStat;})" />
								</RadzenCard>
							</div>
						}
					</div>
				}
			</div>
		</div>
	</EditForm>
</RadzenCard>
@code {
	private void DialogWindow(string message)
	{
		Dialog.Open("",
	x =>
	@<div>
		@message
	</div>,
	new DialogOptions()
	{
		ShowTitle = true,
		CloseDialogOnEsc = true,
		ShowClose = true,
		Resizable = true,
		Draggable = true,
		CloseDialogOnOverlayClick = true,
		AutoFocusFirstElement = true
	});
	}
}
