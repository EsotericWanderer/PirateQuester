@page "/Bot"
@using DFKContracts.QuestCore.ContractDefinition;
@using PirateQuester.Bot;
@using PirateQuester.Components
@using PirateQuester.DFK.Contracts;
@using PirateQuester.Utils;
@using PirateQuester.Utils.Chain;
<PageTitle>PQ - Bot</PageTitle>


<div class="container-fluid">
	<BotTerminalNavigation />
	<h4 class="text-center">Settings</h4>
	<SfCard>
		<CardContent>
			<EditForm Model="@Bots.Settings">
				<DataAnnotationsValidator />
				<div class="my-1 text-center">
					@if (Acc.Accounts.Any(acc => acc.PQTBalance > 0))
					{
						<SfButton CssClass="e-success mx-1" Disabled="Bots.CheckRunning()" OnClick="@Bots.RunBots">
							Run Bots
						</SfButton>
						<SfButton CssClass="e-danger mx-1" Disabled="Bots.RunningBots.All(bot => bot.StopBot)" OnClick="@Bots.StopBots" >
							Stop Bots
						</SfButton>
						<SfButton CssClass="e-primary mx-1" Disabled="Bots.RunningBots.All(bot => bot.StopBot)" OnClick="RefreshBots">
							Clear Logs
						</SfButton>
						<SfButton CssClass="e-primary mx-1" HtmlAttributes="@(new(){{"type", "button"}})" OnClick="@Bots.SaveSettings">
							Save Settings
						</SfButton>
					}
					else
					{
						<h4 class="text-danger">
							You don't have PQT on any of your accounts.
						</h4>
						<h4 class="text-danger">
							Visit the <SfButton OnClick=@(() => Nav.NavigateTo("Accounts"))>Accounts</SfButton> page to add an account with PQT.
						</h4>
					}
				</div>
				<div class="row">
					<div class="col-md-6">
						Download cleared logs
						<SfCheckBox @bind-Checked=@Bots.Settings.DownloadClearedLogs />
						<label for="UpdateInterval" >
							Clear logs interval (Seconds) (0 to turn off)<br />
						</label>
						<SfNumericTextBox name="UpdateInterval"
							TValue="int"
							@bind-Value="@Bots.Settings.ClearLogsInterval"
							OnChange="@((val) => {Bots.SaveSettings();})" />
					</div>
					<div class="col-md-6">
						<label for="UpdateInterval" >
							Update Frequency (Seconds)
						</label>
						<SfNumericTextBox name="UpdateInterval"
							TValue="int"
							@bind-Value="@Bots.Settings.UpdateInterval"
							OnChange="@((val) => {Bots.SaveSettings();})" />
					</div>

					<div class="col-md-6">
						<label for="MinStamina" >
							Min Stamina to Quest
						</label>
						<SfNumericTextBox name="MinStamina"
							TValue="int"
							@bind-Value="@Bots.Settings.MinStamina"
							OnChange="@((val) => {Bots.SaveSettings();})" />
					</div>
					
					<div class="col-md-6">
						<label for="CancelTxnDelay" >
							Cancel transaction delay. (Milliseconds)
						</label>
					
						<SfNumericTextBox name="CancelTxnDelay"
							TValue="int"
							@bind-Value="@Bots.Settings.CancelTxnDelay"
							OnChange="@((val) => {Bots.SaveSettings();})" />
					</div>
					
					<div class="col-md-6 w100-tooltip">
						<label for="MaxGasFee">
							Max Gas Fee DFK
						</label>
						<SfNumericTextBox name="MaxGasFee"
										  TValue="decimal"
										  @bind-Value="@Bots.Settings.MaxGasFeeGwei"
										  OnChange="@((val) => {Bots.SaveSettings();})" />
						<SfTooltip ID="tooltip"
							IsSticky="false"
							CloseDelay="500"
							Target="#target"
							Content="@($"Be careful about setting Priority fee too high, it will quickly drain your gas. Recommended range is between 0 and 1. If your transactions are failing increase priority fees a bit and restart the bot.")">
						<label for="MaxPriorityFee" id="target">
							Max Priority Fee DFK
						</label>
						<SfNumericTextBox name="MaxPriorityFee"
										  TValue="decimal"
										  @bind-Value="@Bots.Settings.MaxPriorityFeeGwei"
										  OnChange="@((val) => {Bots.SaveSettings();})" />
						</SfTooltip>
					</div>
					<div class="col-md-6 w100-tooltip">
						<label for="MaxGasFeeKlaytn">
							Max Gas Fee Klaytn
						</label>
						<SfNumericTextBox name="MaxGasFeeKlaytn"
										  TValue="decimal"
										  @bind-Value="@Bots.Settings.MaxGasFeeGweiKlaytn"
										  OnChange="@((val) => {Bots.SaveSettings();})" />
						<SfTooltip ID="tooltip"
							IsSticky="false"
							CloseDelay="500"
							Target="#target"
							Content="@($"Be careful about setting Priority fee too high, it will quickly drain your gas. Recommended range is between 0 and 1. If your transactions are failing increase priority fees a bit and restart the bot.")">
							<label for="MaxPriorityFeeKlaytn" id="target">
								Max Priority Fee Klaytn
							</label>
							<SfNumericTextBox name="MaxPriorityFeeKlaytn"
											  TValue="decimal"
											  Min="0"
											  Max="999"
											  @bind-Value="@Bots.Settings.MaxPriorityFeeGweiKlaytn"
											  OnChange="@((val) => {Bots.SaveSettings();})" />
						</SfTooltip>
					</div>
					
					<div class="col-md-3 text-center mb-1">
						<label>
							Enable Hero Selling
							<SfCheckBox
								@bind-Checked=@Bots.Settings.SellHeroes
								/>
						</label>
					</div>
					<div class="col-md-3 text-center mb-1">
						<label>
							Cancel Unpriced Hero Sales
							<SfCheckBox @bind-Checked=@Bots.Settings.CancelUnpricedHeroSales />
						</label>
					</div>
					<div class="col-md-3 text-center mb-1">
						<label>
							Enable Questing
							<SfCheckBox @bind-Checked=@Bots.Settings.QuestHeroes />
						</label>
					</div>
					<div class="col-md-3 text-center mb-1">
						<label>
							Use Stampots
							<SfCheckBox @bind-Checked=@Bots.Settings.UseStaminaPotions />
						</label>
					</div>
					<div class="col-md-3 text-center mb-1">
						<label>
							Force Stampots On Full XP
							<SfCheckBox @bind-Checked=@Bots.Settings.ForceStampotOnFullXP />
						</label>
					</div>
					@if(Bots.Settings.QuestHeroes)
					{
						<div class="col-md-12 text-center">
							<SfButton CssClass="e-primary" OnClick="(() => ShowDFKQuests = !ShowDFKQuests)">
								@if (ShowDFKQuests)
								{
									<span>
										Show Serendale Quests
									</span>
								}
								else
								{
									<span>
										Show Crystalvale Quests
									</span>
								}
							</SfButton>
						</div>
						<div class="col-12 text-center">
							@foreach (Chain chain in Constants.ChainsList)
							{
								@if ((ShowDFKQuests && chain.Name == "DFK") || (ShowDFKQuests is false && chain.Name == "Klaytn"))
								{
									<div class="row">
										<div class="col-12">
											<h5>
												@($"{chain.Name} Quest Contracts")
											</h5>
											@*First 8 quests are training quests*@
											<div class="row">
												@foreach (QuestContract quest in QuestContractDefinitions.DFKQuestContracts.First(qc => qc.Chain.Name == chain.Name).QuestContracts.Skip(8))
												{
													var questEnabled = Bots.Settings.ChainQuestEnabled.Find(qe => qe.Chain.Name == chain.Name).QuestEnabled.First(qe => qe.QuestId == quest.Id);

													<div class="col-md-4 col-lg-3">
														<p>
															@($"{quest.Name}")
														</p>
														<label class="d-inline-block">
															Enabled
															<SfCheckBox @bind-Checked=@questEnabled.Enabled />
														</label>
														<SfTooltip ID="tooltip"
															IsSticky="false"
															CloseDelay="500"
															Target="#questEagerlyTooltip"
															Content="@($"Quest Eagerly means the bot will quest your heroes when one hero reached maximum stamina. Cannot be enabled with Quest Instantly.")">
															<label class="d-inline-block" id="questEagerlyTooltip">
																Quest Eagerly
																<SfCheckBox @bind-Checked=@questEnabled.QuestEagerly />
															</label>
														</SfTooltip>
														<SfTooltip ID="tooltip"
															IsSticky="false"
															CloseDelay="500"
															Target="#questInstantlyTooltip"
															Content="@($"Quest Instantly means the bot will send your heroes asap when they're above minimum stamina. Cannot be enabled with Quest Eagerly.")">
															<label class="d-inline-block" id="questInstantlyTooltip">
															Quest Instantly
															<SfCheckBox @bind-Checked=@questEnabled.QuestInstantly />
														</label>
														</SfTooltip>
														<SfTooltip ID="tooltip"
														   IsSticky="false"
														   CloseDelay="500"
														   Target="#capAttemptsTooltip"
														   Content="@($"Cap attempts means that the bot will never maximize the # of attempts for the current stamina of a hero. It will use the attempts available with the set Minimum Stamina Amount.")">
															<label class="d-inline-block" id="capAttemptsTooltip">
																Cap attempts
																<SfCheckBox @bind-Checked=@questEnabled.CapAttempts />
															</label>
														</SfTooltip>
														<SfNumericTextBox name="@($"MinStam{chain.Name}{quest.Id}")"
															TValue="int?"
															Placeholder="@($"Min Stam: {Bots.Settings.MinStamina.ToString()}")"
														@bind-Value="@questEnabled.MinStamina" />
													</div>
												}
											</div>
											<h5>
												@($"{chain.Name} Training Quests")
											</h5>
											<div class="row">
												@foreach (DFKStatAmount stat in Bots.Settings.MinTrainingStats)
												{
													var TQ = Bots.Settings.ChainQuestEnabled.Find(qe => qe.Chain.Name == chain.Name).QuestEnabled[Bots.Settings.MinTrainingStats.IndexOf(stat)];
													<div class="col-md-6">
														<p>
															@($"{stat.Name} training.")
														</p>
														<label class="d-inline-block">
															Enabled
															<SfCheckBox @bind-Checked=@TQ.Enabled />
														</label>
														
														<SfTooltip ID="tooltip"
														   IsSticky="false"
														   CloseDelay="500"
														   Target="#questEagerlyTooltip"
														   Content="@($"Quest Eagerly means the bot will quest your heroes when one hero reached maximum stamina. Cannot be enabled with Quest Instantly.")">
															<label class="d-inline-block" id="questEagerlyTooltip">
																Quest Eagerly
																<SfCheckBox @bind-Checked=@TQ.QuestEagerly />
															</label>
														</SfTooltip>

														<SfTooltip ID="tooltip"
														   IsSticky="false"
														   CloseDelay="500"
														   Target="#questInstantlyTooltip"
														   Content="@($"Quest Instantly means the bot will send your heroes asap when they're above minimum stamina. Cannot be enabled with Quest Eagerly.")">
															<label class="d-inline-block" id="questInstantlyTooltip">
																Quest Instantly
																<SfCheckBox @bind-Checked=@TQ.QuestInstantly />
															</label>
														</SfTooltip>
														<SfTooltip ID="tooltip"
															IsSticky="false"
															CloseDelay="500"
															Target="#capAttemptsTooltip"
															Content="@($"Cap attempts means that the bot will never maximize the # of attempts for the current stamina of a hero. It will use the attempts available with the set Minimum Stamina Amount.")">
															<label class="d-inline-block" id="capAttemptsTooltip">
																Cap attempts
																<SfCheckBox @bind-Checked=@TQ.CapAttempts />
															</label>
														</SfTooltip>
														<SfNumericTextBox name="@($"MinStam{chain.Name}{Bots.Settings.MinTrainingStats.IndexOf(stat)}")"
															TValue="int?"
															@bind-Value="@TQ.MinStamina"
															Placeholder="@($"Min Stam: {Bots.Settings.MinStamina.ToString()}")" />
														<br>
														<label for="@($"Training{stat.Id}")">
															@($"Min Stat To Train")
														</label>
														<SfNumericTextBox Name="@($"Training{stat.Id}")" @bind-Value=@stat.Amount />
													</div>
												}
											</div>
										</div>
									</div>
								}
							}
						</div>
					}
					
					<div>
						<div class="text-center my-2" style="font-size:12px;">
							<label for="LevelUp">
								Enable Levelup
								<SfCheckBox TChecked="bool" @bind-Checked=@Bots.Settings.LevelUp Name="LevelUp" />
							</label>
						</div>
						@if(Bots.Settings.LevelUp)
						{
							<div class="row">
								@foreach (LevelUpSetting levelSetting in Bots.Settings.LevelUpSettings)
								{									
									<h6 class="text-center">@(levelSetting.HeroClass) Levelup settings</h6>
									<div class="col-md-4">
										<SfCard CssClass="m-2">
											<CardHeader>
												Main (+1)
											</CardHeader>
											<CardContent>
												<SfDropDownList TItem="DFKStat"
													TValue="byte"
													DataSource="@Constants.DFKStats"
													@bind-value="levelSetting.MainAttribute.Id">
													<DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
												</SfDropDownList>
											</CardContent>
										</SfCard>
									</div>
									<div class="col-md-4">
										<SfCard CssClass="m-2">
											<CardHeader>
												Secondary (50% +1)
											</CardHeader>
											<CardContent>
												<SfDropDownList TItem="DFKStat"
													TValue="byte"
													DataSource="@Constants.DFKStats"
														@bind-value="levelSetting.SecondaryAttribute.Id">
													<DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
												</SfDropDownList>
											</CardContent>
										</SfCard>
									</div>
									<div class="col-md-4">
										<SfCard CssClass="m-2">
											<CardHeader>
												Secondary (50% +1)
											</CardHeader>
											<CardContent>
												<SfDropDownList TItem="DFKStat"
													TValue="byte"
													DataSource="@Constants.DFKStats"
													@bind-value="levelSetting.TertiaryAttribute.Id">
													<DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
												</SfDropDownList>
											</CardContent>
										</SfCard>
									</div>
								}
							</div>
						}
					</div>
				</div>
			</EditForm>
		</CardContent>
	</SfCard>
</div>
