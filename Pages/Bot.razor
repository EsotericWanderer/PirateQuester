@page "/Bot"
@using DFKContracts.QuestCore.ContractDefinition;
@using PirateQuester.Bot;
@using PirateQuester.Components
@using PirateQuester.DFK.Contracts;
@using PirateQuester.Utils;
<PageTitle>PQ - Bot</PageTitle>
<BotTerminalNavigation />
<RadzenCard class="my-1">
	<EditForm Model="Bots.Settings">
		<div class="my-1 text-center">
			<RadzenButton Text="Run Bots" ButtonType="ButtonType.Submit" Disabled="Bots.CheckRunning()" Click="@Bots.RunBots" />
			<RadzenButton Text="Stop Bots" ButtonType="ButtonType.Submit" Disabled="Bots.RunningBots.All(bot => bot.StopBot)" Click="@Bots.StopBots" />
		</div>
		<div class="row">

			<div class="col-md-6">
				<RadzenLabel Text="Update Frequency (Seconds)" Component="UpdateInterval" />
				<RadzenNumeric Name="UpdateInterval" class="w-100 my-1" @bind-Value=@Bots.Settings.UpdateInterval />
			</div>

			<div class="col-md-6">
				<RadzenLabel Text="Min Stamina to Quest" Component="MinStamina" />
				<RadzenNumeric Name="MinStamina" class="w-100 my-1" @bind-Value="@Bots.Settings.MinStamina" />
			</div>

			<div class="col-md-12">
				<RadzenLabel Text="MaxGasFee (If your Max Fee is too low txns could get stuck during high traffic times.)" Component="MaxGasFee" />
				<RadzenNumeric Name="MaxGasFee" class="w-100 my-1" @bind-Value="@Bots.Settings.MaxGasFeeGwei" />
			</div>
			<div class="col-12">
				<RadzenText Text="Professions" TextStyle="TextStyle.H5" />
				@*First 8 quests are training quests*@
				<div class="row">
					@foreach(QuestContract quest in QuestContractDefinitions.DFKQuestContracts.Skip(8))
					{
						<div class="col-md-4 col-lg-3">
							<RadzenText Text="@($"{quest.Name}")"/>
							<RadzenLabel Text="@($"Enabled:")" Component="@($"ProfessionEnabled{quest.Id}")" />
							<RadzenCheckBox Name="@($"ProfessionEnabled{quest.Id}")"
									TValue="bool"
									Value="Bots.Settings.QuestEnabled[quest.Id-1]"
									Change="@((val) => Bots.Settings.QuestEnabled[quest.Id-1] = val)" />
						</div>
					}
				</div>
				<RadzenText Text="Training" TextStyle="TextStyle.H5" />
				<div class="row">

					@foreach (DFKStatAmount stat in Bots.Settings.MinTrainingStats)
					{
						<div class="col-md-6">
							<RadzenText Text="@($"{stat.Name} training.")" />
							<RadzenLabel Text="@($"Enabled:")" Component="@($"TrainingEnabled{stat.Id}")" />
							<RadzenCheckBox Name="@($"TrainingEnabled{stat.Id}")" 
								TValue="bool"
								Value="Bots.Settings.QuestEnabled[Bots.Settings.MinTrainingStats.IndexOf(stat)]"
								Change="@((val) => Bots.Settings.QuestEnabled[Bots.Settings.MinTrainingStats.IndexOf(stat)] = val)" />
							<br>
							<RadzenLabel Text="@($"Min Value")" 
								Component="@($"Training{stat.Id}")" />
							<RadzenNumeric 
								Name="@($"Training{stat.Id}")" class="w-100 my-1" @bind-Value=@stat.Amount />
						</div>
					}
				</div>

			</div>

			<div>
				<div class="text-center my-2" style="font-size:12px;">
					<RadzenLabel Text="Level Up" Component="LevelUp" /><br />
					<RadzenCheckBox @bind-Value=@Bots.Settings.LevelUp Name="LevelUp">
						Enable Levelup
					</RadzenCheckBox>
				</div>
				@if(Bots.Settings.LevelUp)
				{
					<div class="row">
						@foreach (string mainClass in Constants.Classes)
						{
							var suggested = Bots.Settings.SuggestedLevelUpSettings.FirstOrDefault(setting => setting.HeroClass == mainClass.ToLower());
							var valueAttribute = Bots.Settings.LevelUpSettings.FirstOrDefault(setting => setting.HeroClass == mainClass.ToLower());
							valueAttribute = suggested;
							if(suggested is null)
							{
								Console.WriteLine(suggested.HeroClass);
								continue;
							}
							
							<RadzenText TextStyle="TextStyle.H6" class="text-center">@(mainClass) Levelup settings</RadzenText>
							<div class="col-md-4">
								<RadzenCard class="m-2">
									<RadzenText Text="Main (+1)" class="text-center" />
									<RadzenDropDown TValue="DFKStat"
									   Data="@Constants.DFKStats"
									   AllowClear="false"
									   TextProperty="Name"
									   class="w-100"
									   Value=@valueAttribute.MainAttribute
									   Change="((value) => {valueAttribute.MainAttribute = value as DFKStat;})" />
								</RadzenCard>
							</div>
							<div class="col-md-4">
								<RadzenCard class="m-2">
									<RadzenText Text="Secondary (50% +1)" class="text-center" />
									<RadzenDropDown TValue="DFKStat"
									   Data="@Constants.DFKStats"
									   TextProperty="Name"
									   AllowClear="false"
									   class="w-100"
									   Value=@valueAttribute.SecondaryAttribute
									   Change="((value) => {valueAttribute.SecondaryAttribute = value as DFKStat;})" />
								</RadzenCard>
							</div>
							<div class="col-md-4">
								<RadzenCard class="m-2">
									<RadzenText Text="Secondary (50% +1)" class="text-center" />
									<RadzenDropDown TValue="DFKStat"
									   Data="@Constants.DFKStats"
									   TextProperty="Name"
									   AllowClear="false"
									   class="w-100"
									   Value=@valueAttribute.TertiaryAttribute
									   Change="((value) => {valueAttribute.TertiaryAttribute = value as DFKStat;})" />
								</RadzenCard>
							</div>
						}
					</div>
				}
			</div>
		</div>
	</EditForm>
</RadzenCard>
@code {
	private void DialogWindow(string message)
	{
		Dialog.Open("",
	x =>
	@<div>
		@message
	</div>,
	new DialogOptions()
	{
		ShowTitle = true,
		CloseDialogOnEsc = true,
		ShowClose = true,
		Resizable = true,
		Draggable = true,
		CloseDialogOnOverlayClick = true,
		AutoFocusFirstElement = true
	});
	}
}
