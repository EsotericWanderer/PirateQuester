@page "/"
@using DFK
@using System.Reflection
@using Utils;
@inject AccountManager accounts
@inject NavigationManager NM
@inject IJSRuntime JS

<PageTitle>PQ - Home</PageTitle>
<RadzenText class="text-center mt-2" TextStyle="TextStyle.H5">List Account Heroes</RadzenText>
@if(accounts.Accounts.Count > 0)
{
	<RadzenDropDown AllowClear="true"
		AllowFiltering="true"
		FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
	@bind-Value=@owners
		Multiple="true"
		Placeholder="Select..."
		Data="@accounts.Accounts.Keys"
		TextProperty=""
		ValueProperty=""
		Change="@LoadHeroes"
		Class="w-100 my-3 py-3" />
}
<RadzenTextArea @bind-Value=@ownerInput
	Placeholder="Additional addresses"
	Change="@LoadHeroes"
	Class="w-100 my-3 py-3" />
@if(Loading)
{
	<RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" ProgressBarStyle="ProgressBarStyle.Secondary" />
}
<RadzenDataGrid
	Data="@Heroes"
	TItem="Hero"
	AllowPaging="true"
	AllowSorting="true"
	AllowColumnReorder="true"
	AllowColumnResize="true" 
	AllowFiltering="true"
	ShowPagingSummary="true"
	ColumnWidth="100px"
	PagerHorizontalAlign="HorizontalAlign.Center"
	PageSize="50"
	Style="max-height:800px;"
	PagingSummaryFormat="@pagingSummaryFormat">
	<Columns>
		<RadzenDataGridColumn TItem="Hero" Property="FullName" Title="Name" Width="200px">
			<Template Context="data">
				@data.FullName()
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Hero" Property="salePrice" Title="Cost">
				<Template Context="data">
					@if(data.salePrice is not null)
					{
							@data.SalePrice(2)
					}
					else{
						<span>
							Not for Sale
						</span>
					}
				</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Hero" Property="id" Title="Id">
			<Template Context="data">
				@(ulong.Parse(data.id) > 1000000000000 ? $"CV-{ulong.Parse(data.id) - 1000000000000}" : ulong.Parse(data.id))
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Hero" Property="currentQuest" Title="Current Quest">
			<Template Context="data">
				@data.GetCurrentQuestName()
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Hero" Property="GetRarity" Title="Rarity">
			<Template Context="data">
				@data.GetRarity()
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Hero" Property="mainClass" Title="Class" />
		<RadzenDataGridColumn TItem="Hero" Property="subClass" Title="Subclass" />
		<RadzenDataGridColumn TItem="Hero" Property="stamina" Title="Stamina">
			<Template Context="data">
				@data.StaminaCurrent()/@data.stamina
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Hero" Property="level" Title="Level"/>
		<RadzenDataGridColumn TItem="Hero" Property="generation" Title="Generation"/>
		<RadzenDataGridColumn TItem="Hero" Property="statBoost1" Title="Statboost 1" />
		<RadzenDataGridColumn TItem="Hero" Property="statBoost2" Title="Statboost 2" />
		<RadzenDataGridColumn TItem="Hero" Property="profession" Title="Profession" />
		<RadzenDataGridColumn TItem="Hero" Property="strength" Title="Strength" />
		<RadzenDataGridColumn TItem="Hero" Property="dexterity" Title="Dexterity" />
		<RadzenDataGridColumn TItem="Hero" Property="agility" Title="Agility" />
		<RadzenDataGridColumn TItem="Hero" Property="vitality" Title="Vitality" />
		<RadzenDataGridColumn TItem="Hero" Property="endurance" Title="Endurance" />
		<RadzenDataGridColumn TItem="Hero" Property="intelligence" Title="Intelligence" />
		<RadzenDataGridColumn TItem="Hero" Property="wisdom" Title="Wisdom" />
		<RadzenDataGridColumn TItem="Hero" Property="luck" Title="Luck" />
	</Columns>
</RadzenDataGrid>

@code{
	string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
	bool Loading = false;
	string ownerInput = "";
	List<string> owners = new();
	//protected override async Task OnInitializedAsync()
	//{

	//}
	private async Task LoadHeroes()
	{
		if(owners is null)
		{
			return;
		}
		List<string> ownerArg = owners;
		if (ownerInput != "")
		{
			string[] inputOwners = ownerInput.Split(new string[] { ",","\r\n" ,"\n", "\r"}, StringSplitOptions.TrimEntries);
			foreach (string o in inputOwners)
			{
				if(o.Length == 42 && o.StartsWith("0x"))
				{
					ownerArg.Add(o);
				}
			}
		}
		if (ownerArg.Count > 0)
		{
			Loading = true;
			Dictionary<HeroesArgument, string> args = new();
			args.Add(HeroesArgument.owner_in, $@"[""{string.Join(@""",""", ownerArg)}""]");
			string request = API.HeroesRequestBuilder(args);
			Heroes = (await API.GetHeroes(request)).ToList();
			Console.WriteLine(Heroes);
			Loading = false;
		}
	}
	public List<Hero> Heroes { get; set; }

}